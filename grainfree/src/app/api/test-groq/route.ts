import { NextResponse } from "next/server";
import OpenAI from "openai";
import { supabase } from "@/lib/supabaseClient";

const client = new OpenAI({
  apiKey: process.env.GROQ_API_KEY,
  baseURL: "https://api.groq.com/openai/v1",
});

export async function POST(req: Request) {
  try {
    const { userId, answers } = await req.json();

    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const prompt = `
You are a registered dietitian creating a gluten-free plan.
Return STRICT JSON only (no prose) with:
{
  "title": string,
  "description": string,
  "goals": [{ "title": string, "progress": number }],
  "meals": [{ "name": string, "type": "Breakfast"|"Lunch"|"Dinner"|"Snack", "calories": number }],
  "recommendations": [{ "title": string, "why": string }]
}

User answers:
${JSON.stringify(answers, null, 2)}
`;

    const response = await client.chat.completions.create({
      model: "llama-3.1-8b-instant",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.4,
    });

    const text = response.choices?.[0]?.message?.content?.trim() || "{}";

    let parsed: any;
    try {
      parsed = JSON.parse(text);
    } catch {
      const match = text.match(/\{[\s\S]*\}/);
      parsed = match ? JSON.parse(match[0]) : {};
    }

    // üéØ Derive calorie target from answers
    let calorieTarget = 2000;
    if (answers.goal?.includes("Gain healthy weight")) calorieTarget = 2800;
    if (answers.goal?.includes("Reduce bloating")) calorieTarget = 1800;
    if (answers.goal?.includes("Energy & stamina")) calorieTarget = 2500;

    // üìù Save plan
    const { data, error } = await supabase
      .from("healthplans")
      .insert({
        user_id: userId,
        title: parsed.title || "Personalized Health Plan",
        description: parsed.description || "Generated by AI",
        goals: parsed.goals || [],
        meals: parsed.meals || [],
        recommendations: parsed.recommendations || [],
        status: "active",
      })
      .select()
      .single();

    if (error) throw error;

    // üìù Upsert into user profile with calorie_target
    await supabase
      .from("profiles")
      .upsert({ id: userId, calorie_target: calorieTarget }, { onConflict: "id" });

    return NextResponse.json({ success: true, plan: data });
  } catch (err: any) {
    console.error("generate-plan error:", err);
    return NextResponse.json(
      { error: err.message || "Server error" },
      { status: 500 }
    );
  }
}
